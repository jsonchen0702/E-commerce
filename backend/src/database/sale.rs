//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "sale")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub ordered_at: DateTime,
    pub shipping_status: String,
    pub customer_id: i32,
    pub address_id: i32,
    pub is_paid: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::address::Entity",
        from = "Column::AddressId",
        to = "super::address::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Address,
    #[sea_orm(
        belongs_to = "super::customer::Entity",
        from = "Column::CustomerId",
        to = "super::customer::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Customer,
    #[sea_orm(has_many = "super::sale_and_product::Entity")]
    SaleAndProduct,
    #[sea_orm(has_many = "super::status_update::Entity")]
    StatusUpdate,
}

impl Related<super::address::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Address.def()
    }
}

impl Related<super::customer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Customer.def()
    }
}

impl Related<super::sale_and_product::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SaleAndProduct.def()
    }
}

impl Related<super::status_update::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StatusUpdate.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
