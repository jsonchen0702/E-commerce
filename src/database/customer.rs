//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "customer")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub username: String,
    pub first_name: String,
    pub last_name: String,
    pub email: String,
    pub telephone: String,
    #[sea_orm(unique)]
    pub default_address_id: Option<i32>,
    #[sea_orm(unique)]
    pub salt: String,
    pub password_hash: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub token: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::address::Entity",
        from = "Column::DefaultAddressId",
        to = "super::address::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Address,
    #[sea_orm(has_many = "super::product_review::Entity")]
    ProductReview,
    #[sea_orm(has_many = "super::sale::Entity")]
    Sale,
}

impl Related<super::address::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Address.def()
    }
}

impl Related<super::product_review::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProductReview.def()
    }
}

impl Related<super::sale::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sale.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
